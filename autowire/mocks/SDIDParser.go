// Code generated by mockery v2.12.2. DO NOT EDIT.

/*
 * Copyright (c) 2022, Alibaba Group;
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package mocks

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"

	autowire "github.com/cc-cheunggg/ioc-golang/autowire"
)

// SDIDParser is an autogenerated mock type for the SDIDParser type
type SDIDParser struct {
	mock.Mock
}

// Parse provides a mock function with given fields: fi
func (_m *SDIDParser) Parse(fi *autowire.FieldInfo) (string, error) {
	ret := _m.Called(fi)

	var r0 string
	if rf, ok := ret.Get(0).(func(*autowire.FieldInfo) string); ok {
		r0 = rf(fi)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*autowire.FieldInfo) error); ok {
		r1 = rf(fi)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSDIDParser creates a new instance of SDIDParser. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewSDIDParser(t testing.TB) *SDIDParser {
	mock := &SDIDParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
